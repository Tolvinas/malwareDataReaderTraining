import numpy as np
from sklearn import svm
from sklearn import model_selection
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.model_selection import train_test_split

trainDataFiles1 = [
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDataset0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDataset1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDataset2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDataset3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDataset4.csv']
testDataFiles1 = [
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDatasetTest0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDatasetTest1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDatasetTest2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDatasetTest3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier1.5splitDatasetTest4.csv']
trainDataFiles2 = [
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDataset0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDataset1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDataset2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDataset3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDataset4.csv']
testDataFiles2 = [
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDatasetTest0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDatasetTest1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDatasetTest2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDatasetTest3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.0splitDatasetTest4.csv']
trainDataFiles3 = [
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDataset0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDataset1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDataset2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDataset3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDataset4.csv']
testDataFiles3 = [
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDatasetTest0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDatasetTest1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDatasetTest2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDatasetTest3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier2.5splitDatasetTest4.csv']
trainDataFiles4 = [
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDataset0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDataset1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDataset2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDataset3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDataset4.csv']
testDataFiles4 = [
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDatasetTest0.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDatasetTest1.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDatasetTest2.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDatasetTest3.csv',
    '.\\groupedByRiskScoreSize1000Multiplier3.0splitDatasetTest4.csv']
# trainDataFiles = trainDataFiles2
trainDataFiles = sorted(trainDataFiles1 + trainDataFiles2 + trainDataFiles3 + trainDataFiles4)
testDataFiles = sorted(testDataFiles1 + testDataFiles2 + testDataFiles3 + testDataFiles4)
# testDataFiles = testDataFiles2

totalSVMTN = [[] for i in range(4)]
totalSVMFP = [[] for i in range(4)]
totalSVMFN = [[] for i in range(4)]
totalSVMTP = [[] for i in range(4)]
totalSVMprecision = [[] for i in range(4)]
totalSVMrecall = [[] for i in range(4)]
totalSVMfScore = [[] for i in range(4)]
totalSVMerrorRate = [[]for i in range(4)]
totalSVMaccuracy = [[]for i in range(4)]

totalTreeTN = [[] for i in range(4)]
totalTreeFP = [[] for i in range(4)]
totalTreeFN = [[] for i in range(4)]
totalTreeTP = [[] for i in range(4)]
totalTreeprecision = [[] for i in range(4)]
totalTreerecall = [[] for i in range(4)]
totalTreefScore = [[] for i in range(4)]
totalTreeerrorRate = [[] for i in range(4)]
totalTreeaccuracy = [[] for i in range(4)]
datasetCounter = 0
for i in range(len(trainDataFiles)):  # Iteruojami penki duomenų rinkiniai
    if (i % 5 == 0):
        datasetCounter += 1
    datasetIndex = datasetCounter - 1

    # Paruošiami pirmos iteracijos apmokymo duomenis
    trainDataFile = trainDataFiles[i]
    trainData = np.genfromtxt(trainDataFile, delimiter=",", dtype=np.string_, usecols=np.arange(0, 1001))
    trainParametersCount = trainData.shape[1] - 1
    XTrain = trainData[:, 0:trainParametersCount].astype(dtype=np.int16)
    encoder = LabelEncoder()
    YTrain = encoder.fit_transform(trainData[:, trainParametersCount]).astype(dtype=np.int16)

    # Paruošiami pirmos iteracijos klasifikavimo testavimo duomenys
    testDataFile = testDataFiles[i]
    testData = np.genfromtxt(testDataFile, delimiter=",", dtype=np.string_, usecols=np.arange(0, 1001))
    testParametersCount = testData.shape[1] - 1
    XTest = testData[:, 0:testParametersCount].astype(dtype=np.int16)
    encoder = LabelEncoder()
    YTest = encoder.fit_transform(testData[:, testParametersCount]).astype(dtype=np.int16)
    print(trainDataFile + "|" + testDataFile)

    # Apmokomas SVM
    svmModel = svm.SVC(gamma='auto', verbose=False)
    svmModel.fit(XTrain, YTrain)
    YPrediction = svmModel.predict(XTest)
    # Skaičiuojamos tikslumo reikšmės
    accuracy = metrics.accuracy_score(YTest, YPrediction)
    confusionMatrix = metrics.confusion_matrix(YTest, YPrediction)
    TN = confusionMatrix[0][0];FP = confusionMatrix[0][1];FN = confusionMatrix[1][0];TP = confusionMatrix[1][1]
    precision = TP / (TP + FP)
    recall = TP / (FN + TP)
    fScore = 2 * ((recall * precision) / (recall + precision))
    errorRate = (FP + FN) / (TP + TN + FP + FN)
    #Išsaugomos reikšmės
    totalSVMTN[datasetIndex].append(TN); totalSVMFP[datasetIndex].append(FP);
    totalSVMFN[datasetIndex].append(FN); totalSVMTP[datasetIndex].append(TP);
    totalSVMaccuracy[datasetIndex].append(accuracy); totalSVMprecision[datasetIndex].append(precision);
    totalSVMrecall[datasetIndex].append(recall); totalSVMfScore[datasetIndex].append(fScore); totalSVMerrorRate[datasetIndex].append(errorRate);

    # Apmokomas Sprendimų medis
    decisionTreeModel = DecisionTreeClassifier()
    decisionTreeModel.fit(XTrain, YTrain)
    YPrediction = decisionTreeModel.predict(XTest)
    # Skaičiuojamos tikslumo reikšmės
    accuracy = metrics.accuracy_score(YTest, YPrediction)
    confusionMatrix = metrics.confusion_matrix(YTest, YPrediction)
    TN = confusionMatrix[0][0];FP = confusionMatrix[0][1];FN = confusionMatrix[1][0];TP = confusionMatrix[1][1]
    precision = TP / (TP + FP)
    recall = TP / (FN + TP)
    fScore = 2 * ((recall * precision) / (recall + precision))
    errorRate = (FP + FN) / (TP + TN + FP + FN)
    # Išsaugomos reikšmės
    totalTreeTN[datasetIndex].append(TN); totalTreeFP[datasetIndex].append(FP);
    totalTreeFN[datasetIndex].append(FN); totalTreeTP[datasetIndex].append(TP);
    totalTreeaccuracy[datasetIndex].append(accuracy); totalTreeprecision[datasetIndex].append(precision);
    totalTreerecall[datasetIndex].append(recall); totalTreefScore[datasetIndex].append(fScore); totalTreeerrorRate[datasetIndex].append(errorRate);

print("SVM TN = {}, FP = {}, FN = {}, TP = {}".format(totalSVMTN, totalSVMFP, totalSVMFN, totalSVMTP))
print("SVM precision = {}, recall = {}, fScore = {}, errorRate = {}".format(totalSVMprecision,
                                                                                                totalSVMrecall,
                                                                                                totalSVMfScore,
                                                                                                totalSVMerrorRate))
print(totalSVMaccuracy)



print("Decision tree TN = {}, FP = {}, FN = {}, TP = {}".format(totalTreeTN, totalTreeFP, totalTreeFN, totalTreeTP))
print("Decision tree precision = {}, recall = {}, fScore = {}, errorRate = {}".format(totalTreeprecision,
                                                                                                          totalTreerecall,
                                                                                                          totalTreefScore,
                                                                                                          totalTreeerrorRate))
print(totalTreeaccuracy)
